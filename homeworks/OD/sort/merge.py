# **Merge Sort** — это алгоритм "разделяй и властвуй", который сортирует массив,
# рекурсивно разбивая его на две половины, сортируя каждую из них, а затем объединяя отсортированные половины в один отсортированный массив.

### Преимущества Merge Sort:
# - **Гарантированно работает за O(n log n)** в худшем, среднем и лучшем случаях.
# - **Обеспечивает стабильность** — сохраняет порядок одинаковых элементов.
# - Хорошо работает на больших объемах данных и при работе с внешней памятью (например, при сортировке очень больших файлов).

### Недостатки Merge Sort:
# - Требует дополнительной памяти для временных массивов (O(n)).
# - Может быть медленнее Quick Sort на небольших массивах из-за большого объема дополнительных операций.

def sort(arr):
    # Базовый случай: массив из 0 или 1 элемента уже отсортирован
    if len(arr) <= 1:
        return arr

    # Разделение массива на две половины
    mid = len(arr) // 2
    left_half = sort(arr[:mid])
    right_half = sort(arr[mid:])

    # Объединение отсортированных половин
    return merge(left_half, right_half)

def merge(left, right):
    result = []
    i = j = 0

    # Сравниваем элементы и добавляем меньший
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    # Добавляем оставшиеся элементы, если есть
    result.extend(left[i:])
    result.extend(right[j:])

    return result