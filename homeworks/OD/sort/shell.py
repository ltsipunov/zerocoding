def sort(arr):
    # Идея алгоритма заключается в том, чтобы сначала сортировать элементы, находящиеся на определённых промежутках (шагах),
    # а затем постепенно уменьшать этот шаг, в конечном итоге выполняя обычную сортировку вставками, когда шаг равен 1.
    # Такой подход уменьшает количество перестановок и сравнений, делая сортировку более эффективной.
    #
    # Основные шаги Shell Sort:
    # 1. Выбирается последовательность интервалов (шагов), например, деление массива на части с интервалом, например, 5, 3, 1.
    # 2. Для каждого интервала выполняется сортировка вставками, рассматривая элементы, расположенные через этот интервал.
    # 3. Постепенно уменьшается интервал, пока он не станет равен 1.
    # 4. В конце выполняется обычная сортировка вставками.
    # Преимущества:
    # - Более быстрая, чем простая сортировка вставками, особенно на больших массивах.
    # - Простая в реализации.
    # Недостатки:
    # - Не настолько эффективна, как быстрые алгоритмы (например, быстрая сортировка) в худшем случае.
    # - Выбор последовательности интервалов влияет на производительность.
    #
    n = len(arr)
    gap = n // 2  # Начальный интервал (gap)
    # Пока интервал больше 0
    while gap > 0:
        # Проходим по всему массиву с текущим интервалом
        for i in range(gap, n):
            temp = arr[i]
            j = i
            # Внутренний цикл: сравниваем и сдвигаем элементы, расположенные на расстоянии gap
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        # Уменьшаем интервал для следующей итерации
        gap //= 2
    return arr
