# ===================== RADIX =========================
#Radix Sort — это нестандартный алгоритм сортировки, который использует сортировку по разрядам чисел,
#чтобы отсортировать целые числа за линейное время (в среднем и в худшем случае).
# Он особенно эффективен при сортировке больших объемов чисел, когда диапазон значений ограничен.
#Идея заключается в том, чтобы сортировать числа по разрядам, начиная с младших (единицы), затем десятки, сотни и так далее, пока не обработаны все разряды. Для этого обычно используют стабильную сортировку, такую как Counting Sort, чтобы сохранять порядок элементов с одинаковыми разрядами.
#
#**Основные шаги алгоритма:**
#
#1. Определить максимальное число в массиве, чтобы понять, сколько разрядов нужно обрабатывать.
#2. Для каждого разряда (от младших к старшим):
#   - Выполнить стабильную сортировку по текущему разряду (обычно Counting Sort).
#3. После обработки всех разрядов массив будет отсортирован.
#
#**Преимущества:**
#
#- Быстрый для больших объемов данных с ограниченным диапазоном значений.
#- Не использует сравнение элементов, работает за время, пропорциональное длине чисел и количеству элементов.

def counting_sort_for_digit(arr, exp):
    n = len(arr)
    output = [0] * n
    count = [0] * 10  # так как разряды — цифры от 0 до 9
# ------------ Подсчет количества элементов по текущему разряду
    for i in range(n):
        index = (arr[i] // exp) % 10
        count[index] += 1
# ------------- Обновление count для получения позиций элементов
    for i in range(1, 10):
        count[i] += count[i - 1]
# -------------- Построение отсортированного массива по текущему разряду
    i = n - 1
    while i >= 0:
        index = (arr[i] // exp) % 10
        output[count[index] - 1] = arr[i]
        count[index] -= 1
        i -= 1
#  ---------- Копирование отсортированных элементов обратно в исходный массив
    for i in range(n):
        arr[i] = output[i]


def sort(arr):
# -------- Сдвигаем элементы на положительную полуось для корректной сортировки по разрядам
    min_num = min(arr)
    arr = [ i - min_num for i in arr ]
# -------- Находим максимум для определения количества разрядов
    max_num = max(arr)
# --------- Обрабатываем разряды начиная с младших
    exp = 1
    while max_num // exp > 0:
        counting_sort_for_digit(arr, exp)
        exp *= 10
# ---------- выполняем обратный сдвиг
    arr = [ i + min_num for i in arr ]
    return arr
