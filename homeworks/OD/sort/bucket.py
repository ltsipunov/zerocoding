# **Bucket Sort (Сортировка по корзинам)**
#
# Описание:
# - Идея: Разделить диапазон значений на несколько "корзин" (ведер), поместить элементы в соответствующие корзины, отсортировать каждую корзину отдельно, а затем объединить их.
# - Обычно используют, когда элементы равномерно распределены по диапазону.
#
# Шаги:
# 1. Определить диапазон данных и разделить его на несколько корзин.
# 2. Поместить каждый элемент в соответствующую корзину.
# 3. Отсортировать каждую корзину (часто с помощью другого алгоритма, например, вставками).
# 4. Объединить все корзины в итоговый отсортированный массив.
#
# Сложность:
# - В среднем: O(n + k), где n — число элементов, k — число корзин.
# - В худшем случае может достигать O(n^2), если корзины содержат много элементов и сортировка внутри них затратна

def sort(arr):
    if len(arr) <= 1:
        return arr  # Trivial case , but zero divsion  possible

    # Определяем минимальное и максимальное значение
    min_value = min(arr)
    max_value = max(arr)

    # Количество корзин (можно настроить по желанию)
    bucket_count = len(arr)
    # Размер корзины
    bucket_size = (max_value - min_value) / bucket_count

    # Создаем пустые корзины
    buckets = [[] for _ in range(bucket_count)]

    # Распределяем элементы по корзинам
    for num in arr:
        # Находим индекс корзины для текущего элемента
        index = int((num - min_value) / bucket_size)
        if index == bucket_count:
            index -= 1  # На случай, если число равно max_value
        buckets[index].append(num)

    # Сортируем каждую корзину и объединяем
    sorted_array = []
    for bucket in buckets:
        sorted_bucket = sorted(bucket)
        sorted_array.extend(sorted_bucket)

    return sorted_array